
DA2T2C.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000114  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000c0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000114  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000144  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000184  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000120  00000000  00000000  000001a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000000cf  00000000  00000000  000002c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000120  00000000  00000000  00000393  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  000004b4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000018b  00000000  00000000  000004d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000055  00000000  00000000  00000663  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  000006b8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 5e 00 	jmp	0xbc	; 0xbc <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:

int main(void)
{
	unsigned char i = 0; 
    unsigned char j = (1<<PORTC0);
	DDRB = 0xFF;
  80:	8f ef       	ldi	r24, 0xFF	; 255
  82:	84 b9       	out	0x04, r24	; 4
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  84:	2f e7       	ldi	r18, 0x7F	; 127
  86:	3a e1       	ldi	r19, 0x1A	; 26
  88:	46 e0       	ldi	r20, 0x06	; 6
  8a:	21 50       	subi	r18, 0x01	; 1
  8c:	30 40       	sbci	r19, 0x00	; 0
  8e:	40 40       	sbci	r20, 0x00	; 0
  90:	e1 f7       	brne	.-8      	; 0x8a <main+0xa>
  92:	00 c0       	rjmp	.+0      	; 0x94 <main+0x14>
  94:	00 00       	nop
    
	while (1) 
    {
		_delay_ms(250);
		j ^= 1<<PORTC0;
  96:	80 e0       	ldi	r24, 0x00	; 0
#include <util/delay.h>


int main(void)
{
	unsigned char i = 0; 
  98:	90 e0       	ldi	r25, 0x00	; 0
	DDRB = 0xFF;
    
	while (1) 
    {
		_delay_ms(250);
		j ^= 1<<PORTC0;
  9a:	21 e0       	ldi	r18, 0x01	; 1
  9c:	01 c0       	rjmp	.+2      	; 0xa0 <main+0x20>
		if(j == 1)
			i++;
  9e:	9f 5f       	subi	r25, 0xFF	; 255
		PORTB = i;
  a0:	95 b9       	out	0x05, r25	; 5
  a2:	5f e7       	ldi	r21, 0x7F	; 127
  a4:	3a e1       	ldi	r19, 0x1A	; 26
  a6:	46 e0       	ldi	r20, 0x06	; 6
  a8:	51 50       	subi	r21, 0x01	; 1
  aa:	30 40       	sbci	r19, 0x00	; 0
  ac:	40 40       	sbci	r20, 0x00	; 0
  ae:	e1 f7       	brne	.-8      	; 0xa8 <main+0x28>
  b0:	00 c0       	rjmp	.+0      	; 0xb2 <main+0x32>
  b2:	00 00       	nop
	DDRB = 0xFF;
    
	while (1) 
    {
		_delay_ms(250);
		j ^= 1<<PORTC0;
  b4:	82 27       	eor	r24, r18
		if(j == 1)
  b6:	81 30       	cpi	r24, 0x01	; 1
  b8:	99 f7       	brne	.-26     	; 0xa0 <main+0x20>
  ba:	f1 cf       	rjmp	.-30     	; 0x9e <main+0x1e>

000000bc <_exit>:
  bc:	f8 94       	cli

000000be <__stop_program>:
  be:	ff cf       	rjmp	.-2      	; 0xbe <__stop_program>
