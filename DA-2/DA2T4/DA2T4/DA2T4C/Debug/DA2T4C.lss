
DA2T4C.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001da  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000166  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800100  00800100  000001da  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001da  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000020c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  0000024c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000000cc  00000000  00000000  00000274  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000007c  00000000  00000000  00000340  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000000c7  00000000  00000000  000003bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000048  00000000  00000000  00000484  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000016c  00000000  00000000  000004cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000049  00000000  00000000  00000638  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00000681  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__vector_11>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a4 30       	cpi	r26, 0x04	; 4
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 48 00 	call	0x90	; 0x90 <main>
  88:	0c 94 b1 00 	jmp	0x162	; 0x162 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <main>:

ISR(TIMER1_COMPA_vect);

int main(void)
{
	counter = 0;				// initialize counter to zero
  90:	10 92 03 01 	sts	0x0103, r1
  94:	10 92 02 01 	sts	0x0102, r1
	multiple = 0;				// initialize check counter to zero
  98:	10 92 01 01 	sts	0x0101, r1
  9c:	10 92 00 01 	sts	0x0100, r1
	DDRB = 0xFF;				// set all of PORTB as outputs
  a0:	8f ef       	ldi	r24, 0xFF	; 255
  a2:	84 b9       	out	0x04, r24	; 4
	DDRC = 0x30;				// set PC4 and PC5 as outputs
  a4:	80 e3       	ldi	r24, 0x30	; 48
  a6:	87 b9       	out	0x07, r24	; 7
	TCCR1B |= 0x0D;				// setup up CTC mode and prescaler (1024) for timer
  a8:	e1 e8       	ldi	r30, 0x81	; 129
  aa:	f0 e0       	ldi	r31, 0x00	; 0
  ac:	80 81       	ld	r24, Z
  ae:	8d 60       	ori	r24, 0x0D	; 13
  b0:	80 83       	st	Z, r24
	TCNT1 = 0;					// initialize timer1 to zero
  b2:	10 92 85 00 	sts	0x0085, r1
  b6:	10 92 84 00 	sts	0x0084, r1
	OCR1A = 3906;				// set CTC value
  ba:	82 e4       	ldi	r24, 0x42	; 66
  bc:	9f e0       	ldi	r25, 0x0F	; 15
  be:	90 93 89 00 	sts	0x0089, r25
  c2:	80 93 88 00 	sts	0x0088, r24
	TIMSK1 |= (1 << OCIE1A);	//enable compare interrupt
  c6:	ef e6       	ldi	r30, 0x6F	; 111
  c8:	f0 e0       	ldi	r31, 0x00	; 0
  ca:	80 81       	ld	r24, Z
  cc:	82 60       	ori	r24, 0x02	; 2
  ce:	80 83       	st	Z, r24
	sei();						// enable global interrupts
  d0:	78 94       	sei
	
	while (1)					// loop forever and execute interrupt
	{							// subroutine every 0.5 seconds
	}
  d2:	ff cf       	rjmp	.-2      	; 0xd2 <main+0x42>

000000d4 <__vector_11>:
}

ISR(TIMER1_COMPA_vect)		// interrupt subroutine body
{
  d4:	1f 92       	push	r1
  d6:	0f 92       	push	r0
  d8:	0f b6       	in	r0, 0x3f	; 63
  da:	0f 92       	push	r0
  dc:	11 24       	eor	r1, r1
  de:	8f 93       	push	r24
  e0:	9f 93       	push	r25
	counter++;				// increment counter for LED bargraph
  e2:	80 91 02 01 	lds	r24, 0x0102
  e6:	90 91 03 01 	lds	r25, 0x0103
  ea:	01 96       	adiw	r24, 0x01	; 1
	if(counter > 255)		// if counter went above 255 (9th bit)
  ec:	8f 3f       	cpi	r24, 0xFF	; 255
  ee:	91 05       	cpc	r25, r1
  f0:	09 f0       	breq	.+2      	; 0xf4 <__vector_11+0x20>
  f2:	2c f4       	brge	.+10     	; 0xfe <__vector_11+0x2a>
	}
}

ISR(TIMER1_COMPA_vect)		// interrupt subroutine body
{
	counter++;				// increment counter for LED bargraph
  f4:	90 93 03 01 	sts	0x0103, r25
  f8:	80 93 02 01 	sts	0x0102, r24
  fc:	04 c0       	rjmp	.+8      	; 0x106 <__vector_11+0x32>
	if(counter > 255)		// if counter went above 255 (9th bit)
		counter = 0;			// reset counter back to zero
  fe:	10 92 03 01 	sts	0x0103, r1
 102:	10 92 02 01 	sts	0x0102, r1
	PORTB = counter;		// output counter to LED bargraph
 106:	80 91 02 01 	lds	r24, 0x0102
 10a:	85 b9       	out	0x05, r24	; 5
	multiple++;	
 10c:	80 91 00 01 	lds	r24, 0x0100
 110:	90 91 01 01 	lds	r25, 0x0101
 114:	01 96       	adiw	r24, 0x01	; 1
 116:	90 93 01 01 	sts	0x0101, r25
 11a:	80 93 00 01 	sts	0x0100, r24
				// increment counter for 5th/10th checks
	switch(multiple) 
 11e:	8a 30       	cpi	r24, 0x0A	; 10
 120:	91 05       	cpc	r25, r1
 122:	69 f0       	breq	.+26     	; 0x13e <__vector_11+0x6a>
 124:	1c f4       	brge	.+6      	; 0x12c <__vector_11+0x58>
 126:	05 97       	sbiw	r24, 0x05	; 5
 128:	39 f0       	breq	.+14     	; 0x138 <__vector_11+0x64>
 12a:	14 c0       	rjmp	.+40     	; 0x154 <__vector_11+0x80>
 12c:	8f 30       	cpi	r24, 0x0F	; 15
 12e:	91 05       	cpc	r25, r1
 130:	49 f0       	breq	.+18     	; 0x144 <__vector_11+0x70>
 132:	44 97       	sbiw	r24, 0x14	; 20
 134:	51 f0       	breq	.+20     	; 0x14a <__vector_11+0x76>
 136:	0e c0       	rjmp	.+28     	; 0x154 <__vector_11+0x80>
	{
		case 5:				// if first 5th rising edge
			PORTC = 0x20;		// PC4 = 0 and PC5 = 1
 138:	80 e2       	ldi	r24, 0x20	; 32
 13a:	88 b9       	out	0x08, r24	; 8
			break;
 13c:	0b c0       	rjmp	.+22     	; 0x154 <__vector_11+0x80>
		case 10:			// if first 10th rising edge
			PORTC = 0x10;		// PC4 = 1 and PC5 = 0
 13e:	80 e1       	ldi	r24, 0x10	; 16
 140:	88 b9       	out	0x08, r24	; 8
			break;
 142:	08 c0       	rjmp	.+16     	; 0x154 <__vector_11+0x80>
		case 15:			// if second 5th rising edge
			PORTC = 0x30;		// PC4 = 1 and PC5 = 1
 144:	80 e3       	ldi	r24, 0x30	; 48
 146:	88 b9       	out	0x08, r24	; 8
			break;
 148:	05 c0       	rjmp	.+10     	; 0x154 <__vector_11+0x80>
		case 20:			// if second 10th rising edge
			PORTC = 0x00;		// PC4 = 0 and PC5 = 0
 14a:	18 b8       	out	0x08, r1	; 8
			multiple = 0;		// clear check counter
 14c:	10 92 01 01 	sts	0x0101, r1
 150:	10 92 00 01 	sts	0x0100, r1
			break;
		default:
			break;
	}
 154:	9f 91       	pop	r25
 156:	8f 91       	pop	r24
 158:	0f 90       	pop	r0
 15a:	0f be       	out	0x3f, r0	; 63
 15c:	0f 90       	pop	r0
 15e:	1f 90       	pop	r1
 160:	18 95       	reti

00000162 <_exit>:
 162:	f8 94       	cli

00000164 <__stop_program>:
 164:	ff cf       	rjmp	.-2      	; 0x164 <__stop_program>
