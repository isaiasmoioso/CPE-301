
DA-4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000017e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000012a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000017e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001b0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000158  00000000  00000000  00000210  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000000d7  00000000  00000000  00000368  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000142  00000000  00000000  0000043f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000584  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000018a  00000000  00000000  000005a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000196  00000000  00000000  00000732  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  000008c8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 93 00 	jmp	0x126	; 0x126 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
{
	unsigned char i = 230, j=230, k=230;// initialize to 230 for 10% value of 255
	unsigned char counter2 = 0, counter3 = 0; 
	// two variables to update 2nd and 3rd PWMs counters
	
	DDRD = 0x40;		// OC0A	
  80:	80 e4       	ldi	r24, 0x40	; 64
  82:	8a b9       	out	0x0a, r24	; 10
	DDRB = 0x0A;		// OC1A and OC2A
  84:	8a e0       	ldi	r24, 0x0A	; 10
  86:	84 b9       	out	0x04, r24	; 4

	OCR0A = 230;		// 230 is 10% value of 255 when decrementing
  88:	86 ee       	ldi	r24, 0xE6	; 230
  8a:	87 bd       	out	0x27, r24	; 39
	TCCR0A = 0xC1;		// Phase Correct PWM, inverted
  8c:	91 ec       	ldi	r25, 0xC1	; 193
  8e:	94 bd       	out	0x24, r25	; 36
	TCCR0B = 0x03;		// N = 64
  90:	43 e0       	ldi	r20, 0x03	; 3
  92:	45 bd       	out	0x25, r20	; 37
	OCR1A = 230;		// 230 is 10% value of 255 when decrementing
  94:	a8 e8       	ldi	r26, 0x88	; 136
  96:	b0 e0       	ldi	r27, 0x00	; 0
  98:	26 ee       	ldi	r18, 0xE6	; 230
  9a:	30 e0       	ldi	r19, 0x00	; 0
  9c:	11 96       	adiw	r26, 0x01	; 1
  9e:	3c 93       	st	X, r19
  a0:	2e 93       	st	-X, r18
	TCCR1A = 0xC1;		// Phase Correct PWM, inverted
  a2:	90 93 80 00 	sts	0x0080, r25
	TCCR1B = 0x03;		// N = 64
  a6:	40 93 81 00 	sts	0x0081, r20
	OCR2A = 230;		// 230 is 10% value of 255 when decrementing
  aa:	e3 eb       	ldi	r30, 0xB3	; 179
  ac:	f0 e0       	ldi	r31, 0x00	; 0
  ae:	80 83       	st	Z, r24
	TCCR2A = 0xC1;		// Phase Correct PWM, inverted
  b0:	90 93 b0 00 	sts	0x00B0, r25
	TCCR2B = 0x04;		// N = 64
  b4:	94 e0       	ldi	r25, 0x04	; 4
  b6:	90 93 b1 00 	sts	0x00B1, r25
	
    while (1) // loop forever
    {
		
		OCR0A = i;		// update 3 PWM values at beginning of each loop
  ba:	87 bd       	out	0x27, r24	; 39
		OCR1A = j;		// from delay of 40ms
  bc:	11 96       	adiw	r26, 0x01	; 1
  be:	3c 93       	st	X, r19
  c0:	2e 93       	st	-X, r18
		OCR2A = k;
  c2:	80 83       	st	Z, r24

void delay (); // function declaration for delay

int main(void)
{
	unsigned char i = 230, j=230, k=230;// initialize to 230 for 10% value of 255
  c4:	36 ee       	ldi	r19, 0xE6	; 230
		OCR0A = i;		// update 3 PWM values at beginning of each loop
		OCR1A = j;		// from delay of 40ms
		OCR2A = k;
		
		counter2++;		// increment counter for 2nd PWM every time 1st is updated
		i -= 5;		// increase duty cycle of PWM1 by 10%
  c6:	81 ee       	ldi	r24, 0xE1	; 225
void delay (); // function declaration for delay

int main(void)
{
	unsigned char i = 230, j=230, k=230;// initialize to 230 for 10% value of 255
	unsigned char counter2 = 0, counter3 = 0; 
  c8:	40 e0       	ldi	r20, 0x00	; 0
		
		OCR0A = i;		// update 3 PWM values at beginning of each loop
		OCR1A = j;		// from delay of 40ms
		OCR2A = k;
		
		counter2++;		// increment counter for 2nd PWM every time 1st is updated
  ca:	91 e0       	ldi	r25, 0x01	; 1

void delay (); // function declaration for delay

int main(void)
{
	unsigned char i = 230, j=230, k=230;// initialize to 230 for 10% value of 255
  cc:	26 ee       	ldi	r18, 0xE6	; 230
			if(j < 30)	// if duty cycle is more than 90% (inverted)
				j = 230; // reset duty cycle back to 10%
		}
		if(counter3 >= 9) 
		{				// if PWM2 reset duty cycle
			counter3 = 0;// clear counter for PWM3
  ce:	c0 e0       	ldi	r28, 0x00	; 0
			k-=5;		// increase duty cycle of PWM3 by 10%
			if(k < 30)	// if duty cycle is more than 90% (inverted)
				k = 230;// reset duty cycle back to 10%
  d0:	56 ee       	ldi	r21, 0xE6	; 230
  d2:	0b c0       	rjmp	.+22     	; 0xea <main+0x6a>
		OCR2A = k;
		
		counter2++;		// increment counter for 2nd PWM every time 1st is updated
		i -= 5;		// increase duty cycle of PWM1 by 10%
		if(i < 30)		// if duty cycle is more than 90% (inverted)
			i = 230;	// reset duty cycle back to 10%
  d4:	85 2f       	mov	r24, r21
		if(counter2 >= 9) 
  d6:	99 30       	cpi	r25, 0x09	; 9
  d8:	40 f0       	brcs	.+16     	; 0xea <main+0x6a>
		{				// if PWM1 reset duty cycle
			counter2 = 0; // clear counter for PWM2
			counter3++; // increment counter for PWM3
  da:	4f 5f       	subi	r20, 0xFF	; 255
			j -= 25;	// increase duty cycle of PWM2 by 10%
  dc:	29 51       	subi	r18, 0x19	; 25
			if(j < 30)	// if duty cycle is more than 90% (inverted)
  de:	2e 31       	cpi	r18, 0x1E	; 30
  e0:	18 f4       	brcc	.+6      	; 0xe8 <main+0x68>
		i -= 5;		// increase duty cycle of PWM1 by 10%
		if(i < 30)		// if duty cycle is more than 90% (inverted)
			i = 230;	// reset duty cycle back to 10%
		if(counter2 >= 9) 
		{				// if PWM1 reset duty cycle
			counter2 = 0; // clear counter for PWM2
  e2:	9c 2f       	mov	r25, r28
			counter3++; // increment counter for PWM3
			j -= 25;	// increase duty cycle of PWM2 by 10%
			if(j < 30)	// if duty cycle is more than 90% (inverted)
				j = 230; // reset duty cycle back to 10%
  e4:	25 2f       	mov	r18, r21
  e6:	01 c0       	rjmp	.+2      	; 0xea <main+0x6a>
		i -= 5;		// increase duty cycle of PWM1 by 10%
		if(i < 30)		// if duty cycle is more than 90% (inverted)
			i = 230;	// reset duty cycle back to 10%
		if(counter2 >= 9) 
		{				// if PWM1 reset duty cycle
			counter2 = 0; // clear counter for PWM2
  e8:	9c 2f       	mov	r25, r28
			counter3++; // increment counter for PWM3
			j -= 25;	// increase duty cycle of PWM2 by 10%
			if(j < 30)	// if duty cycle is more than 90% (inverted)
				j = 230; // reset duty cycle back to 10%
		}
		if(counter3 >= 9) 
  ea:	49 30       	cpi	r20, 0x09	; 9
  ec:	38 f0       	brcs	.+14     	; 0xfc <main+0x7c>
		{				// if PWM2 reset duty cycle
			counter3 = 0;// clear counter for PWM3
			k-=5;		// increase duty cycle of PWM3 by 10%
  ee:	35 50       	subi	r19, 0x05	; 5
			if(k < 30)	// if duty cycle is more than 90% (inverted)
  f0:	3e 31       	cpi	r19, 0x1E	; 30
  f2:	18 f4       	brcc	.+6      	; 0xfa <main+0x7a>
			if(j < 30)	// if duty cycle is more than 90% (inverted)
				j = 230; // reset duty cycle back to 10%
		}
		if(counter3 >= 9) 
		{				// if PWM2 reset duty cycle
			counter3 = 0;// clear counter for PWM3
  f4:	4c 2f       	mov	r20, r28
			k-=5;		// increase duty cycle of PWM3 by 10%
			if(k < 30)	// if duty cycle is more than 90% (inverted)
				k = 230;// reset duty cycle back to 10%
  f6:	35 2f       	mov	r19, r21
  f8:	01 c0       	rjmp	.+2      	; 0xfc <main+0x7c>
			if(j < 30)	// if duty cycle is more than 90% (inverted)
				j = 230; // reset duty cycle back to 10%
		}
		if(counter3 >= 9) 
		{				// if PWM2 reset duty cycle
			counter3 = 0;// clear counter for PWM3
  fa:	4c 2f       	mov	r20, r28
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  fc:	6f ef       	ldi	r22, 0xFF	; 255
  fe:	79 ef       	ldi	r23, 0xF9	; 249
 100:	d0 e0       	ldi	r29, 0x00	; 0
 102:	61 50       	subi	r22, 0x01	; 1
 104:	70 40       	sbci	r23, 0x00	; 0
 106:	d0 40       	sbci	r29, 0x00	; 0
 108:	e1 f7       	brne	.-8      	; 0x102 <main+0x82>
 10a:	00 c0       	rjmp	.+0      	; 0x10c <main+0x8c>
 10c:	00 00       	nop
	TCCR2B = 0x04;		// N = 64
	
    while (1) // loop forever
    {
		
		OCR0A = i;		// update 3 PWM values at beginning of each loop
 10e:	87 bd       	out	0x27, r24	; 39
		OCR1A = j;		// from delay of 40ms
 110:	62 2f       	mov	r22, r18
 112:	70 e0       	ldi	r23, 0x00	; 0
 114:	11 96       	adiw	r26, 0x01	; 1
 116:	7c 93       	st	X, r23
 118:	6e 93       	st	-X, r22
		OCR2A = k;
 11a:	30 83       	st	Z, r19
		
		counter2++;		// increment counter for 2nd PWM every time 1st is updated
 11c:	9f 5f       	subi	r25, 0xFF	; 255
		i -= 5;		// increase duty cycle of PWM1 by 10%
 11e:	85 50       	subi	r24, 0x05	; 5
		if(i < 30)		// if duty cycle is more than 90% (inverted)
 120:	8e 31       	cpi	r24, 0x1E	; 30
 122:	c0 f2       	brcs	.-80     	; 0xd4 <main+0x54>
 124:	d8 cf       	rjmp	.-80     	; 0xd6 <main+0x56>

00000126 <_exit>:
 126:	f8 94       	cli

00000128 <__stop_program>:
 128:	ff cf       	rjmp	.-2      	; 0x128 <__stop_program>
