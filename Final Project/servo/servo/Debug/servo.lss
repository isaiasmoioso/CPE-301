
servo.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000148  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000f4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000148  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000178  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  000001b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000015b  00000000  00000000  000001e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000000ca  00000000  00000000  0000033b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000172  00000000  00000000  00000405  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00000578  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000158  00000000  00000000  000005ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000080  00000000  00000000  00000704  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00000784  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 51 00 	call	0xa2	; 0xa2 <main>
  78:	0c 94 78 00 	jmp	0xf0	; 0xf0 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <Wait>:
// }
#define F_CPU 8000000UL					//XTAL = 8MHZ
#include <avr/io.h>
#include <util/delay.h>
void Wait()
{
  80:	22 e3       	ldi	r18, 0x32	; 50
  82:	30 e0       	ldi	r19, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  84:	80 e0       	ldi	r24, 0x00	; 0
  86:	90 e0       	ldi	r25, 0x00	; 0
  88:	fc 01       	movw	r30, r24
  8a:	31 97       	sbiw	r30, 0x01	; 1
  8c:	f1 f7       	brne	.-4      	; 0x8a <Wait+0xa>
  8e:	fc 01       	movw	r30, r24
  90:	31 97       	sbiw	r30, 0x01	; 1
  92:	f1 f7       	brne	.-4      	; 0x90 <Wait+0x10>
  94:	fc 01       	movw	r30, r24
  96:	31 97       	sbiw	r30, 0x01	; 1
  98:	f1 f7       	brne	.-4      	; 0x96 <Wait+0x16>
  9a:	21 50       	subi	r18, 0x01	; 1
  9c:	31 09       	sbc	r19, r1
	int i;
	for(i=0;i<50;i++)
  9e:	a1 f7       	brne	.-24     	; 0x88 <Wait+0x8>
	{
		_delay_loop_2(0);
		_delay_loop_2(0);
		_delay_loop_2(0);
	}
}
  a0:	08 95       	ret

000000a2 <main>:
int main()
{
	//FOR TIMER1
	TCCR0A|=(1<<COM0A1)|(1<<WGM01)|(1<<WGM00)|(1<<COM0B1) |(1<<COM0A1);        //NON Inverted PWM
  a2:	84 b5       	in	r24, 0x24	; 36
  a4:	83 6a       	ori	r24, 0xA3	; 163
  a6:	84 bd       	out	0x24, r24	; 36
	TCCR0B|=(1<<CS01)|(1<<CS00); //PRESCALER=64 MODE 14(FAST PWM)
  a8:	85 b5       	in	r24, 0x25	; 37
  aa:	83 60       	ori	r24, 0x03	; 3
  ac:	85 bd       	out	0x25, r24	; 37
	//ICR1=2499;  //fPWM=50Hz...fpwm=50=8MHz/N(Top+1) --> Top=8MHz/(50Hz*64) -1=2,499

	DDRD |=(1<<PORTD6);	   //PWM Pins as Output
  ae:	56 9a       	sbi	0x0a, 6	; 10
	DDRD |=(1<<PORTD5);
  b0:	55 9a       	sbi	0x0a, 5	; 10
		
// 		OCR0B=67;   //0 degree 50 is min, with 300 when decrementing 25
// 		Wait();
// 		OCR0B=65;   //0 degree 50 is min, with 300 when decrementing 25
// 		Wait();
		OCR0B=120;   //0 degree 50 is min, with 300 when decrementing 25
  b2:	0f 2e       	mov	r0, r31
  b4:	f8 e7       	ldi	r31, 0x78	; 120
  b6:	ef 2e       	mov	r14, r31
  b8:	f0 2d       	mov	r31, r0
		Wait();
		OCR0B=170;   //0 degree 50 is min, with 300 when decrementing 25
  ba:	0f 2e       	mov	r0, r31
  bc:	fa ea       	ldi	r31, 0xAA	; 170
  be:	ff 2e       	mov	r15, r31
  c0:	f0 2d       	mov	r31, r0
		Wait();
		OCR0B=228;   //0 degree 50 is min, with 300 when decrementing 25
  c2:	04 ee       	ldi	r16, 0xE4	; 228
		Wait();
		
		OCR0A=110;   //0 degree 50 is min, with 300 when decrementing 25
  c4:	1e e6       	ldi	r17, 0x6E	; 110
		Wait();
		OCR0A=150;   //0 degree 50 is min, with 300 when decrementing 25
  c6:	d6 e9       	ldi	r29, 0x96	; 150
		Wait();
		OCR0A=200;   //0 degree 50 is min, with 300 when decrementing 25
  c8:	c8 ec       	ldi	r28, 0xC8	; 200
		
// 		OCR0B=67;   //0 degree 50 is min, with 300 when decrementing 25
// 		Wait();
// 		OCR0B=65;   //0 degree 50 is min, with 300 when decrementing 25
// 		Wait();
		OCR0B=120;   //0 degree 50 is min, with 300 when decrementing 25
  ca:	e8 bc       	out	0x28, r14	; 40
		Wait();
  cc:	0e 94 40 00 	call	0x80	; 0x80 <Wait>
		OCR0B=170;   //0 degree 50 is min, with 300 when decrementing 25
  d0:	f8 bc       	out	0x28, r15	; 40
		Wait();
  d2:	0e 94 40 00 	call	0x80	; 0x80 <Wait>
		OCR0B=228;   //0 degree 50 is min, with 300 when decrementing 25
  d6:	08 bd       	out	0x28, r16	; 40
		Wait();
  d8:	0e 94 40 00 	call	0x80	; 0x80 <Wait>
		
		OCR0A=110;   //0 degree 50 is min, with 300 when decrementing 25
  dc:	17 bd       	out	0x27, r17	; 39
		Wait();
  de:	0e 94 40 00 	call	0x80	; 0x80 <Wait>
		OCR0A=150;   //0 degree 50 is min, with 300 when decrementing 25
  e2:	d7 bd       	out	0x27, r29	; 39
		Wait();
  e4:	0e 94 40 00 	call	0x80	; 0x80 <Wait>
		OCR0A=200;   //0 degree 50 is min, with 300 when decrementing 25
  e8:	c7 bd       	out	0x27, r28	; 39
		Wait();
  ea:	0e 94 40 00 	call	0x80	; 0x80 <Wait>
// 		Wait();
		//35 to 125
// 		OCR0A=98;   //35 degree 581/8=72.6
// 		Wait();

	}
  ee:	ed cf       	rjmp	.-38     	; 0xca <main+0x28>

000000f0 <_exit>:
  f0:	f8 94       	cli

000000f2 <__stop_program>:
  f2:	ff cf       	rjmp	.-2      	; 0xf2 <__stop_program>
