
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000182  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000012e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000182  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001b4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  000001f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000015b  00000000  00000000  0000021c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000000ca  00000000  00000000  00000377  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000016f  00000000  00000000  00000441  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  000005b0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000016c  00000000  00000000  000005e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000080  00000000  00000000  00000750  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  000007d0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 51 00 	call	0xa2	; 0xa2 <main>
  78:	0c 94 95 00 	jmp	0x12a	; 0x12a <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <Wait>:
#define F_CPU 8000000UL					//XTAL = 8MHZ
#include <avr/io.h>
#include <util/delay.h>
void Wait()
{
  80:	22 e3       	ldi	r18, 0x32	; 50
  82:	30 e0       	ldi	r19, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  84:	80 e0       	ldi	r24, 0x00	; 0
  86:	90 e0       	ldi	r25, 0x00	; 0
  88:	fc 01       	movw	r30, r24
  8a:	31 97       	sbiw	r30, 0x01	; 1
  8c:	f1 f7       	brne	.-4      	; 0x8a <Wait+0xa>
  8e:	fc 01       	movw	r30, r24
  90:	31 97       	sbiw	r30, 0x01	; 1
  92:	f1 f7       	brne	.-4      	; 0x90 <Wait+0x10>
  94:	fc 01       	movw	r30, r24
  96:	31 97       	sbiw	r30, 0x01	; 1
  98:	f1 f7       	brne	.-4      	; 0x96 <Wait+0x16>
  9a:	21 50       	subi	r18, 0x01	; 1
  9c:	31 09       	sbc	r19, r1
	int i;
	for(i=0;i<50;i++)
  9e:	a1 f7       	brne	.-24     	; 0x88 <Wait+0x8>
	{
		_delay_loop_2(0);
		_delay_loop_2(0);
		_delay_loop_2(0);
	}
}
  a0:	08 95       	ret

000000a2 <main>:
int main()
{
	//FOR TIMER1
	TCCR1A|=(1<<COM1A1)|(1<<WGM11);        //NON Inverted PWM
  a2:	e0 e8       	ldi	r30, 0x80	; 128
  a4:	f0 e0       	ldi	r31, 0x00	; 0
  a6:	80 81       	ld	r24, Z
  a8:	82 68       	ori	r24, 0x82	; 130
  aa:	80 83       	st	Z, r24
	TCCR1B|=(1<<WGM13)|(1<<WGM12)|(1<<CS11)|(1<<CS10); //PRESCALER=64 MODE 14(FAST PWM)
  ac:	e1 e8       	ldi	r30, 0x81	; 129
  ae:	f0 e0       	ldi	r31, 0x00	; 0
  b0:	80 81       	ld	r24, Z
  b2:	8b 61       	ori	r24, 0x1B	; 27
  b4:	80 83       	st	Z, r24
	ICR1=2499;  //fPWM=50Hz...fpwm=50=8MHz/N(Top+1) --> Top=8MHz/(50Hz*64) -1=2,499
  b6:	83 ec       	ldi	r24, 0xC3	; 195
  b8:	99 e0       	ldi	r25, 0x09	; 9
  ba:	90 93 87 00 	sts	0x0087, r25
  be:	80 93 86 00 	sts	0x0086, r24

	DDRB |=(1<<PORTB1);	   //PWM Pins as Output
  c2:	21 9a       	sbi	0x04, 1	; 4
	while(1)
	{
		// OCR1A=value; //
		//_delay_ms(600);
		//value=value-25; //1.38 ms per degree
		OCR1A=50;   //0 degree 50 is min, with 300 when decrementing 25
  c4:	c8 e8       	ldi	r28, 0x88	; 136
  c6:	d0 e0       	ldi	r29, 0x00	; 0
  c8:	02 e3       	ldi	r16, 0x32	; 50
  ca:	10 e0       	ldi	r17, 0x00	; 0
  cc:	38 01       	movw	r6, r16
		Wait();
		OCR1A=174;  //90 degree - neutral is 1.5ms 15000/8=187.5
  ce:	0f 2e       	mov	r0, r31
  d0:	fe ea       	ldi	r31, 0xAE	; 174
  d2:	af 2e       	mov	r10, r31
  d4:	b1 2c       	mov	r11, r1
  d6:	f0 2d       	mov	r31, r0
		Wait();
		//35 to 125
		OCR1A=98;   //35 degree 581/8=72.6
  d8:	0f 2e       	mov	r0, r31
  da:	f2 e6       	ldi	r31, 0x62	; 98
  dc:	cf 2e       	mov	r12, r31
  de:	d1 2c       	mov	r13, r1
  e0:	f0 2d       	mov	r31, r0
		Wait();
		OCR1A=223;  //125 degrees. 73-49=24, thus 24+188=212
  e2:	0f 2e       	mov	r0, r31
  e4:	ff ed       	ldi	r31, 0xDF	; 223
  e6:	ef 2e       	mov	r14, r31
  e8:	f1 2c       	mov	r15, r1
  ea:	f0 2d       	mov	r31, r0
		Wait();
		//180 to 0
		OCR1A=300;  //180 degree 2,140/8=268
  ec:	0f 2e       	mov	r0, r31
  ee:	fc e2       	ldi	r31, 0x2C	; 44
  f0:	8f 2e       	mov	r8, r31
  f2:	99 24       	eor	r9, r9
  f4:	93 94       	inc	r9
  f6:	f0 2d       	mov	r31, r0
	while(1)
	{
		// OCR1A=value; //
		//_delay_ms(600);
		//value=value-25; //1.38 ms per degree
		OCR1A=50;   //0 degree 50 is min, with 300 when decrementing 25
  f8:	79 82       	std	Y+1, r7	; 0x01
  fa:	68 82       	st	Y, r6
		Wait();
  fc:	0e 94 40 00 	call	0x80	; 0x80 <Wait>
		OCR1A=174;  //90 degree - neutral is 1.5ms 15000/8=187.5
 100:	b9 82       	std	Y+1, r11	; 0x01
 102:	a8 82       	st	Y, r10
		Wait();
 104:	0e 94 40 00 	call	0x80	; 0x80 <Wait>
		//35 to 125
		OCR1A=98;   //35 degree 581/8=72.6
 108:	d9 82       	std	Y+1, r13	; 0x01
 10a:	c8 82       	st	Y, r12
		Wait();
 10c:	0e 94 40 00 	call	0x80	; 0x80 <Wait>
		OCR1A=223;  //125 degrees. 73-49=24, thus 24+188=212
 110:	f9 82       	std	Y+1, r15	; 0x01
 112:	e8 82       	st	Y, r14
		Wait();
 114:	0e 94 40 00 	call	0x80	; 0x80 <Wait>
		//180 to 0
		OCR1A=300;  //180 degree 2,140/8=268
 118:	99 82       	std	Y+1, r9	; 0x01
 11a:	88 82       	st	Y, r8
		Wait();
 11c:	0e 94 40 00 	call	0x80	; 0x80 <Wait>
		OCR1A=50;   //0 degree 388/8=49
 120:	19 83       	std	Y+1, r17	; 0x01
 122:	08 83       	st	Y, r16
		Wait();//0 degree*/
 124:	0e 94 40 00 	call	0x80	; 0x80 <Wait>
	}
 128:	e7 cf       	rjmp	.-50     	; 0xf8 <main+0x56>

0000012a <_exit>:
 12a:	f8 94       	cli

0000012c <__stop_program>:
 12c:	ff cf       	rjmp	.-2      	; 0x12c <__stop_program>
